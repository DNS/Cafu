/*
=================================================================================
This file is part of Cafu, the open-source game engine and graphics engine
for multiplayer, cross-platform, real-time 3D action.
Copyright (C) 2002-2011 Carsten Fuchs Software.

Cafu is free software: you can redistribute it and/or modify it under the terms
of the GNU General Public License as published by the Free Software Foundation,
either version 3 of the License, or (at your option) any later version.

Cafu is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Cafu. If not, see <http://www.gnu.org/licenses/>.

For support and more information about Cafu, visit us at <http://www.cafu.de>.
=================================================================================
*/

#include "SavePage.hpp"

#include "FontWizard.hpp"

#include "wx/dir.h"


class DirFileDeletorT : public wxDirTraverser
{
    public:

    virtual wxDirTraverseResult OnFile(const wxString& Filename)
    {
        wxRemoveFile(Filename);

        return wxDIR_CONTINUE;
    }

    virtual wxDirTraverseResult OnDir(const wxString& WXUNUSED(Dirname))
    {
        return wxDIR_IGNORE;
    }
};


BEGIN_EVENT_TABLE(SavePageT, wxWizardPageSimple)
    EVT_WIZARD_PAGE_CHANGED(wxID_ANY, SavePageT::OnWizardPageChanged)
    EVT_WIZARD_PAGE_CHANGING(wxID_ANY, SavePageT::OnWizardPageChanging)
END_EVENT_TABLE()


SavePageT::SavePageT(FontWizardT* Parent)
    : wxWizardPageSimple(Parent),
      m_Parent(Parent),
#ifdef _WIN32
      m_BaseDir(wxGetCwd()+"\\Fonts\\")
#else
      m_BaseDir(wxGetCwd()+"/Fonts/")
#endif
{
    // Note: The following code was generated by wxFormBuilder and copied here manually because wxFormbuilder
    // doesn't support wxWizardPage as base class.

	wxBoxSizer* bSizer10;
	bSizer10 = new wxBoxSizer( wxVERTICAL );

	wxStaticText* m_staticText9;
	m_staticText9 = new wxStaticText( this, wxID_ANY, wxT("In order to save the font, specify a unique name for this font.\n"), wxDefaultPosition, wxDefaultSize, 0 );
	m_staticText9->Wrap( -1 );
	bSizer10->Add( m_staticText9, 0, wxALL|wxEXPAND, 5 );

	wxStaticText* m_staticText16;
	m_staticText16 = new wxStaticText( this, wxID_ANY, wxT("Enter font name:"), wxDefaultPosition, wxDefaultSize, 0 );
	m_staticText16->Wrap( -1 );
	bSizer10->Add( m_staticText16, 0, wxALL|wxEXPAND, 5 );

	m_FontName = new wxTextCtrl( this, wxID_ANY, wxEmptyString, wxDefaultPosition, wxSize( 200,-1 ), 0 );
	bSizer10->Add( m_FontName, 0, wxALL, 5 );


	bSizer10->Add( 0, 10, 0, 0, 5 );

	wxBoxSizer* bSizer11;
	bSizer11 = new wxBoxSizer( wxVERTICAL );

	wxStaticText* m_staticText10;
	m_staticText10 = new wxStaticText( this, wxID_ANY, wxT("The font will be saved to"), wxDefaultPosition, wxDefaultSize, 0 );
	m_staticText10->Wrap( -1 );
	bSizer11->Add( m_staticText10, 0, wxALL, 5 );

	m_FontDir = new wxStaticText( this, wxID_ANY, m_BaseDir, wxDefaultPosition, wxDefaultSize, 0 );
	m_FontDir->Wrap( -1 );
	m_FontDir->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 92, false, wxEmptyString ) );

	bSizer11->Add( m_FontDir, 0, wxALL|wxEXPAND, 5 );


	bSizer11->Add( 0, 10, 0, 0, 5 );

	wxStaticText* m_staticText17;
	m_staticText17 = new wxStaticText( this, wxID_ANY, wxT("(If you want to delete this font later, delete the directory mentioned above.)\n"), wxDefaultPosition, wxDefaultSize, 0 );
	m_staticText17->Wrap( -1 );
	bSizer11->Add( m_staticText17, 0, wxALL|wxEXPAND, 5 );

	bSizer10->Add( bSizer11, 0, wxEXPAND, 5 );

	this->SetSizer( bSizer10 );
	this->Layout();

	this->SetSizer( bSizer10 );
	this->Layout();

	// Connect Events
	m_FontName->Connect( wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler( SavePageT::OnFontNameChange ), NULL, this );
}


SavePageT::~SavePageT()
{
	// Disconnect Events
	m_FontName->Disconnect( wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler( SavePageT::OnFontNameChange ), NULL, this );
}


void SavePageT::OnFontNameChange(wxCommandEvent& CE)
{
    m_FontDir->SetLabel(m_BaseDir+m_FontName->GetValue());

    m_Parent->FontName=m_FontName->GetValue();
}


void SavePageT::OnWizardPageChanged(wxWizardEvent& WE)
{
    wxWindow* NextButton=FindWindowById(wxID_FORWARD, m_Parent);
    wxASSERT(NextButton!=NULL);
    NextButton->SetLabel("&Save");

    if (m_FontName->GetValue()=="")
        m_FontName->SetValue(m_Parent->DefaultFontName);
}


void SavePageT::OnWizardPageChanging(wxWizardEvent& WE)
{
    if (!WE.GetDirection())
    {
        // Note: We only need to change the button text if we move back. Moving forward to the last page will
        // change the button text to "Finish" through basic wizard functionality.
        wxWindow* NextButton=FindWindowById(wxID_FORWARD, m_Parent);
        wxASSERT(NextButton!=NULL);
        NextButton->SetLabel("&Next");
        return;
    }

    if (m_FontName->GetValue()=="")
    {
        wxMessageBox("To save this font you have to specify a font name in the text field above.", "No font name given");

        WE.Veto();

        m_FontName->SetFocus();

        return;
    }

    // Check if directory already exists and ask user if he wants to overwrite the existing font.
    if (wxDirExists(m_FontDir->GetLabel()) && wxMessageBox("A font with this name already exists. Do you want to overwrite the existing font?", "Overwrite existing font?", wxYES_NO | wxCANCEL, this)!=wxYES)
    {
        WE.Veto();
        return;
    }

    // If directory exists.
    if (wxDirExists(m_FontDir->GetLabel()))
    {
        // Remove all font related directory contents (Font.cmat, FontDescr*, FontImage*).
        DirFileDeletorT FileDeletor;

        wxDir FontDir(m_FontDir->GetLabel());

        FontDir.Traverse(FileDeletor, "Font.cmat");
        FontDir.Traverse(FileDeletor, "FontDescr*");
        FontDir.Traverse(FileDeletor, "FontImage*");
    }
    else
    {
        // Create directory.
        wxMkdir(m_FontDir->GetLabel());
    }

    wxBusyCursor Wait;

    // Create font files in directory.
    m_Parent->SaveFont(m_FontDir->GetLabel(), m_Parent->FontName);
}
