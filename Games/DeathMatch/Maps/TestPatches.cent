-- This is a Cafu Entities file, written by the CaWE Map Editor.
-- The file defines the entity hierarchy and properties of the related game world;
-- it is used both by the CaWE Map Editor as well as by the Cafu Engine.
--
-- You CAN edit this file manually, but note that CaWE may overwrite your changes.
-- Also note that structural changes to the entity hierarchy will bring this file
-- out of sync with the related map (cmap) and world (cw) files, effectively
-- causing LOSS OF WORK (see the documentation for details).
-- It is therefore recommended that you use CaWE for all changes to this file.


-- Instantiation of all entities.
-- ******************************

local Map = world:new("EntityT", "Map")
Map.info_player_start = world:new("EntityT", "info_player_start")
Map.func_group = world:new("EntityT", "func_group")
Map.func_group_1 = world:new("EntityT", "func_group_1")
Map.Call_Lift_Screen = world:new("EntityT", "Call_Lift_Screen")
Map.Hall_Light = world:new("EntityT", "Hall_Light")
Map.LiftWeldTank = world:new("EntityT", "LiftWeldTank")
Map.LiftLight = world:new("EntityT", "LiftLight")
Map.TestTrigger = world:new("EntityT", "TestTrigger")
Map.SoundTrigger = world:new("EntityT", "SoundTrigger")
Map.TestSpeaker = world:new("EntityT", "TestSpeaker")
Map.PointLightSource_001 = world:new("EntityT", "PointLightSource_001")
Map.SimpleLift = world:new("EntityT", "SimpleLift")
Map.SimpleLift.Platform = world:new("EntityT", "Platform")
Map.SimpleLift.Platform.move_dest = world:new("EntityT", "move_dest")


-- Set the worlds root entity.
-- ***************************

world:SetRootEntity(Map)


-- Setup the entity hierarchy.
-- ***************************

Map:AddChild(Map.info_player_start)
Map:AddChild(Map.func_group)
Map:AddChild(Map.func_group_1)
Map:AddChild(Map.Call_Lift_Screen)
Map:AddChild(Map.Hall_Light)
Map:AddChild(Map.LiftWeldTank)
Map:AddChild(Map.LiftLight)
Map:AddChild(Map.TestTrigger)
Map:AddChild(Map.SoundTrigger)
Map:AddChild(Map.TestSpeaker)
Map:AddChild(Map.PointLightSource_001)
Map:AddChild(Map.SimpleLift)
Map.SimpleLift:AddChild(Map.SimpleLift.Platform)
Map.SimpleLift.Platform:AddChild(Map.SimpleLift.Platform.move_dest)


-- Initialization of the entity contents ("constructors").
-- *******************************************************

function Map:OnInit()
    self:GetBasics():set("Static", true)
    self:GetTransform():set("Origin", 0, 0, 0)
    self:GetTransform():set("Orientation", 0, 0, 0)
end

function Map.info_player_start:OnInit()
    self:GetTransform():set("Origin", 16, -16, 56)
    self:GetTransform():set("Orientation", 0, 0, -1)

    local c1 = world:new("ComponentPlayerStartT")
    c1:set("SinglePlayer", true)
    c1:set("MultiPlayer", true)

    self:AddComponent(c1)
end

function Map.func_group:OnInit()
    self:GetBasics():set("Static", true)
    self:GetTransform():set("Origin", 84, -72, 40)
    self:GetTransform():set("Orientation", 0, 0, 0)
end

function Map.func_group_1:OnInit()
    self:GetBasics():set("Static", true)
    self:GetTransform():set("Origin", 108, -128, 40)
    self:GetTransform():set("Orientation", 0, 0, 0)
end

function Map.Call_Lift_Screen:OnInit()
    self:GetTransform():set("Origin", -48, 96, 0)
    self:GetTransform():set("Orientation", 0, 0, 0.104528494)

    local c1 = world:new("ComponentModelT")
    c1:set("Show", true)
    c1:set("Name", "Games/DeathMatch/Models/Terminals/Terminal_2.cmdl")
    c1:set("Animation", -1)
    c1:set("Skin", -1)
    c1:set("Scale", 1)
    c1:set("Gui", "Games/DeathMatch/GUIs/Test_main.cgui")
    c1:set("IsSubmodel", false)
    c1:set("Is1stPerson", false)

    local c2 = world:new("ComponentCollisionModelT")
    c2:set("Name", "Games/DeathMatch/Models/Terminals/Terminal_2.cmap")

    local c3 = world:new("ComponentTargetT")
    c3:set("Target", "SimpleLift")

    local c4 = world:new("ComponentTargetT")
    c4:set("Target", "Hall_Light")

    self:AddComponent(c1, c2, c3, c4)
end

function Map.Hall_Light:OnInit()
    self:GetTransform():set("Origin", -160, 40, 145.80531)
    self:GetTransform():set("Orientation", 0, 0, 0)

    local c1 = world:new("ComponentPointLightT")
    c1:set("On", true)
    c1:set("Color", 0, 0.5019608, 1)
    c1:set("Radius", 125)
    c1:set("ShadowType", 1)

    local c2 = world:new("ComponentScriptT")
    c2:set("Name", "")
    c2:set("ScriptCode", [[
-- This thread function can easily be reused with any PointLight component.
function LightBlinkThread(Light)
    local BlinkColors = { { 0, 1, 1 }, { 1, 0, 1 }, { 1, 1, 0 } }
    local ColNr = 1

    while Light.IsBlinking do
        ColNr = ColNr + 1
        if ColNr > #BlinkColors then ColNr = 1 end
        Light:set("Color", BlinkColors[ColNr])

        coroutine.yield(1.0)    -- Wait 1.0 seconds.
    end
end

local ScriptComp = ...
local LightComp = ScriptComp:GetEntity():GetComponent("PointLight")
local variant = 2

LightComp.IsBlinking = false
LightComp.OrigColor = { LightComp:get("Color") }

function ScriptComp:OnActivate(Other)
    Console.Print("Hello from Map.MyLight's OnActivate()!\n")

    if variant == 1 then
        -- Toggles between cyclic red/green/blue blinking and not blinking.
        if LightComp.IsBlinking then
            -- Currently blinking, turn it off now.
            -- This will break the loop below.
            LightComp.IsBlinking = false
            LightComp:set("Color", LightComp.OrigColor)
        else
            -- Currently not blinking, turn it on now.
            LightComp.IsBlinking = true

            local BlinkColors = { { 1, 0, 0 }, { 0, 1, 0 }, { 0, 0, 1 } }
            local ColNr = 1

            while LightComp.IsBlinking do
                ColNr = ColNr + 1
                if ColNr > #BlinkColors then ColNr = 1 end
                LightComp:set("Color", BlinkColors[ColNr])

                coroutine.yield(1.0)    -- Wait 1.0 seconds.
            end
        end
    elseif variant == 2 then
        -- As variant 1 above (toggles blinking on and off),
        -- but implemented with an explicit thread (coroutine).
        -- As opposed to variant 1, using a thread allows this method to return normally,
        -- rather than returning control only via the call to coroutine.yield().
        if LightComp.IsBlinking then
            -- Currently blinking, turn it off now.
            -- This will break the loop in the thread.
            LightComp.IsBlinking = false
            LightComp:set("Color", LightComp.OrigColor)
        else
            -- Currently not blinking, turn it on now.
            LightComp.IsBlinking = true

            -- Register the function LightBlinkThread as a new thread.
            -- The thread is given the LightComp as its first parameter.
            thread(LightBlinkThread, LightComp);
        end
    else
        -- Implements a one-time blink.
        LightComp:set("Color", 1, 1, 0)   -- Set to yellow.
        coroutine.yield(1.0)              -- Wait 1.0 seconds.
        LightComp:set("Color", LightComp.OrigColor)
    end
end
]])

    self:AddComponent(c1, c2)
end

function Map.LiftWeldTank:OnInit()
    self:GetTransform():set("Origin", -120, -30.947224, 8)
    self:GetTransform():set("Orientation", 0, 0, 0)

    local c1 = world:new("ComponentModelT")
    c1:set("Show", true)
    c1:set("Name", "Games/DeathMatch/Models/Static/WeldTank_blue.mdl")
    c1:set("Animation", 0)
    c1:set("Skin", -1)
    c1:set("Scale", 1)
    c1:set("Gui", "")
    c1:set("IsSubmodel", false)
    c1:set("Is1stPerson", false)

    local c2 = world:new("ComponentCollisionModelT")
    c2:set("Name", "Games/DeathMatch/Models/Static/WeldTank.cmap")

    self:AddComponent(c1, c2)
end

function Map.LiftLight:OnInit()
    self:GetTransform():set("Origin", -120, -16, 17)
    self:GetTransform():set("Orientation", 0, 0, 0)

    local c1 = world:new("ComponentPointLightT")
    c1:set("On", true)
    c1:set("Color", 1, 0.5019608, 0.2509804)
    c1:set("Radius", 30)
    c1:set("ShadowType", 1)

    self:AddComponent(c1)
end

function Map.TestTrigger:OnInit()
    self:GetTransform():set("Origin", 40, -260, 60)
    self:GetTransform():set("Orientation", 0, 0, 0)

    local c1 = world:new("ComponentScriptT")
    c1:set("Name", "")
    c1:set("ScriptCode", [[
local Trigger = ...

function Trigger:OnTrigger(Other)
    -- Don't re-enter this code while we're still busy.
    if self.IsBusy then return end
    self.IsBusy = true

    Console.Print("Hello from Map.TestTrigger's OnTrigger()! This is only run every 3 seconds.\n")

    -- Wait 3 secs, then become available again for the next trigger action.
    coroutine.yield(3)
    self.IsBusy = false
end
]])

    self:AddComponent(c1)
end

function Map.SoundTrigger:OnInit()
    self:GetTransform():set("Origin", -128, -400, 64)
    self:GetTransform():set("Orientation", 0, 0, 0)

    local c1 = world:new("ComponentScriptT")
    c1:set("Name", "")
    c1:set("ScriptCode", [[
local Trigger = ...

function Trigger:OnTrigger(Other)
    -- Don't re-enter this code while we're still busy.
    if self.IsBusy then return end
    self.IsBusy = true

    local Map   = world:GetRootEntity()
    local Sound = Map.TestSpeaker:GetComponent("Sound")

    Sound:Play()
    Console.Print("Hello from Map.SoundTrigger's OnTrigger()!\n")

    -- Wait 2.1 secs, then become available again for the next trigger action.
    coroutine.yield(2.1)
    self.IsBusy = false
end
]])

    self:AddComponent(c1)
end

function Map.TestSpeaker:OnInit()
    self:GetTransform():set("Origin", 48, -416, 72)
    self:GetTransform():set("Orientation", 0, 0, -1)

    local c1 = world:new("ComponentSoundT")
    c1:set("Name", "Ambient/Jungle")
    c1:set("AutoPlay", false)
    c1:set("Interval", 2.1)

    self:AddComponent(c1)
end

function Map.PointLightSource_001:OnInit()
    self:GetTransform():set("Origin", -24, 88, 80)
    self:GetTransform():set("Orientation", 0, 0, 0)

    local c1 = world:new("ComponentPointLightT")
    c1:set("On", true)
    c1:set("Color", 1, 0.5019608, 0.2509804)
    c1:set("Radius", 120)
    c1:set("ShadowType", 1)

    self:AddComponent(c1)
end

function Map.SimpleLift:OnInit()
    self:GetTransform():set("Origin", -96, -8, 96)
    self:GetTransform():set("Orientation", 0, 0, 0)

    local c1 = world:new("ComponentMoverT")
    c1:set("CanPush", true)

    local c2 = world:new("ComponentScriptT")
    c2:set("Name", "Games/DeathMatch/Scripts/MoverBinary.lua")
    c2:set("ScriptCode", "")

    self:AddComponent(c1, c2)
end

function Map.SimpleLift.Platform:OnInit()
    self:GetTransform():set("Origin", 0, 0, -80)
    self:GetTransform():set("Orientation", 0, 0, 0)
end

function Map.SimpleLift.Platform.move_dest:OnInit()
    self:GetTransform():set("Origin", 0, 0, 136)
    self:GetTransform():set("Orientation", 0, 0, 0)
end
