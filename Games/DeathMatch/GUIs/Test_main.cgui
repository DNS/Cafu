local gui = ...

assert(loadfile("Games/DeathMatch/GUIs/Test_init.cgui"))(gui)

local TestGUI         = gui:GetRootWindow()
local SomeImage       = TestGUI.SomeImage
local ButtonToggleHor = TestGUI.ButtonToggleHor
local ButtonToggleVer = TestGUI.ButtonToggleVer
local ButtonQuit      = TestGUI.ButtonQuit
local Counter         = TestGUI.Counter
local FPS             = TestGUI.FPS


function SomeImage:OnFrame()
    self:GetTransform():set("Rotation", self:GetTime() * 50)
end



function ButtonToggleHor:OnMouseButtonDown()
    local newAlign = TestGUI:GetComponent("Text"):get("hor. Align") + 1

    if (newAlign > 1) then newAlign = -1 end

    TestGUI:GetComponent("Text"):set("hor. Align", newAlign)
    self:GetComponent("Text"):set("hor. Align", newAlign)

    self:GetTransform():interpolate("Rotation", 0, 360, 250)
    return true;
end



function ButtonToggleVer:OnMouseButtonDown()
    local newAlign=TestGUI:GetComponent("Text"):get("ver. Align") + 1

    if (newAlign > 1) then newAlign = -1 end

    TestGUI:GetComponent("Text"):set("ver. Align", newAlign)
    ButtonQuit:GetComponent("Text"):set("ver. Align", newAlign)
    self:GetComponent("Text"):set("ver. Align", newAlign)

    self:GetTransform():interpolate("Pos.y", 380, 300, 500)
    self:GetTransform():interpolate("Pos.y", 300, 380, 500)
    return true;
end



function ButtonQuit:OnMouseEnter()
    self:GetComponent("Text"):set("Scale", 0.55)
    self:GetComponent("Border"):set("Color", 1.0, 0.0, 0.0)
end

function ButtonQuit:OnMouseLeave()
    self:GetComponent("Text"):set("Scale", 1.0)
    self:GetComponent("Border"):set("Color", 1.0, 1.0, 1.0)
end

function ButtonQuit:OnMouseButtonDown()
    -- Add a nice shutdown effect.
    TestGUI:GetTransform():set("Rotation", -10)
    TestGUI:GetTransform():interpolate("Pos.y", 30, 30, 300)
    TestGUI:GetTransform():interpolate("Pos.y", 30, 610, 700)

    -- Now somehow quit the game.
    ci.RunCommand("list();");
    return true;
end



Counter.count=0;

function Counter:OnMouseEnter()
    self:GetComponent("Text"):interpolate("Scale", 0.6, 0.7, 250)
    self:GetComponent("Text"):interpolate("Scale", 0.7, 0.6, 250)
end

function Counter:OnMouseButtonDown()
    self.count=self.count+1;
    self:GetComponent("Text"):set("Text", "Counter\n" .. self.count)

    -- IMPORTANT INFORMATION:
    --
    -- As this GUI is a 3D world GUI, it is "operated" from within the HumanPlayerT::Think() code,
    -- which in turn is run on server thinking, client prediction and client reprediction.
    -- Therefore, we can easily get here a lot more often than expected:
    -- Once or more on the client side during (re-)prediction, then again on the server side during thinking.
    -- (If we're running a local single player game, then even all of these occur.)
    --
    -- *** Therefore, anything we do here must have side-effects *ONLY* on the server! ***
    -- The Entity:RunMapCommand() fulfils this requirement, because it actively checks and does nothing when being run on the client.
    -- However, a call to ci.RunCommand("xy();"); *will* run xy() multiple times in the above outlined cases.

    -- Call the MyFirstLift:OnTrigger() method.
 -- ci.RunCommand("runMapCmd('MyFirstLift:OnTrigger();');");
    Entity:RunMapCommand("MyFirstLift:OnTrigger();");

 -- Entity:RunMapCommand("MyLight:SetColor(255, 0, 0);");
    Entity:RunMapCommand("MyLight:OnTrigger();");
    return true;
end



FPS.oldTime = FPS:GetTime()

function FPS:OnFrame()
    local newTime   = FPS:GetTime()
    local deltaTime = newTime - self.oldTime
    local TextComp  = self:GetComponent("Text")

    if (deltaTime<0.000000001) then
        TextComp:set("Text", string.format(" FPS\n INF\n (%.4f sec)", deltaTime))
    else
        TextComp:set("Text", string.format(" FPS\n %.2f\n (%.4f sec)", 1/deltaTime, deltaTime))
    end

    FPS.oldTime=newTime;
end
