local gui = ...

assert(loadfile("Games/DeathMatch/GUIs/Test_init.cgui"))(gui)

local TestGUI         = gui:GetRootWindow()
local SomeImage       = TestGUI.SomeImage
local ButtonToggleHor = TestGUI.ButtonToggleHor
local ButtonToggleVer = TestGUI.ButtonToggleVer
local ButtonQuit      = TestGUI.ButtonQuit
local Counter         = TestGUI.Counter
local FPS             = TestGUI.FPS


function SomeImage:OnFrame()
    self:GetTransform():set("Rotation", self:GetTime() * 50)
end



function ButtonToggleHor:OnMouseButtonDown()
    local newAlign = TestGUI:GetComponent("Text"):get("hor. Align") + 1

    if (newAlign > 1) then newAlign = -1 end

    TestGUI:GetComponent("Text"):set("hor. Align", newAlign)
    self:GetComponent("Text"):set("hor. Align", newAlign)

    self:GetTransform():interpolate("Rotation", 0, 360, 250)
    return true;
end



function ButtonToggleVer:OnMouseButtonDown()
    local newAlign=TestGUI:GetComponent("Text"):get("ver. Align") + 1

    if (newAlign > 1) then newAlign = -1 end

    TestGUI:GetComponent("Text"):set("ver. Align", newAlign)
    ButtonQuit:GetComponent("Text"):set("ver. Align", newAlign)
    self:GetComponent("Text"):set("ver. Align", newAlign)

    self:GetTransform():interpolate("Pos.y", 380, 300, 500)
    self:GetTransform():interpolate("Pos.y", 300, 380, 500)
    return true;
end



function ButtonQuit:OnMouseEnter()
    self:GetComponent("Text"):set("Scale", 0.55)
    self:GetComponent("Border"):set("Color", 1.0, 0.0, 0.0)
end

function ButtonQuit:OnMouseLeave()
    self:GetComponent("Text"):set("Scale", 1.0)
    self:GetComponent("Border"):set("Color", 1.0, 1.0, 1.0)
end

function ButtonQuit:OnMouseButtonDown()
    -- Add a nice shutdown effect.
    TestGUI:GetTransform():set("Rotation", -10)
    TestGUI:GetTransform():interpolate("Pos.y", 30, 30, 300)
    TestGUI:GetTransform():interpolate("Pos.y", 30, 610, 700)

    -- Now somehow quit the game.
    ci.RunCommand("list();");
    return true;
end



Counter.count=0;

function Counter:OnMouseEnter()
    self:GetComponent("Text"):interpolate("Scale", 0.6, 0.7, 250)
    self:GetComponent("Text"):interpolate("Scale", 0.7, 0.6, 250)
end

function Counter:OnMouseButtonDown()
    -- As this GUI is a 3D world GUI, it is "operated" from within the HumanPlayerT::Think() code,
    -- which at this time is implemented such that we get here only on server thinking, but not on
    -- client prediction or reprediction.
    self.count = self.count + 1
    self:GetComponent("Text"):set("Text", "Counter\n" .. self.count)

    -- gui.Model  is the model (component) that this GUI is attached to.
    -- gui.Entity is the entity that holds the model that holds this GUI.
    -- This, if we wanted to call a script that is attached to "our" entity:
    --     gui.Entity:OnActivate()

    -- This is not yet implemented, but something like this is how a reusable GUI might flexibly
    -- work with arbitrary target entities:
    --     gui.Entity:GetComponent("Target"):GetEntity():OnActivate()

    -- Alternatively,
    --     local TargetEnt = world:GetRootEntity():FindByName("myCustomTarget")
    --     TargetEnt:GetComponent("Script"):OnActivate()
    -- is a viable alternative that works, or simply this:
    world:GetRootEntity().MyFirstLift:GetComponent("Script"):OnActivate()
    world:GetRootEntity().MyLight:GetComponent("Script"):OnActivate()

    return true
end



FPS.oldTime = FPS:GetTime()

function FPS:OnFrame()
    local newTime   = FPS:GetTime()
    local deltaTime = newTime - self.oldTime
    local TextComp  = self:GetComponent("Text")

    if (deltaTime<0.000000001) then
        TextComp:set("Text", string.format(" FPS\n INF\n (%.4f sec)", deltaTime))
    else
        TextComp:set("Text", string.format(" FPS\n %.2f\n (%.4f sec)", 1/deltaTime, deltaTime))
    end

    FPS.oldTime=newTime;
end
