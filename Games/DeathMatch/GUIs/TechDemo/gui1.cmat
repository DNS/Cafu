// Default material for borders and backgrounds that is used if nothing else is specified with a GUI window.
// This material will be used with the "A_Solid" shader.
Gui/Default
{
    useMeshColors
    blendFunc src_alpha one_minus_src_alpha

    // We need "ambientMask d" in order to prevent z-fighting with world (entity) GUIs.
    // The font materials have this keyword either, and any material that is supposed
    // to be used as a window background will most likely need it, too.
    // (I don't use it with the crosshairs below, but would if they were used on entity GUIs.)
    ambientMask d

    meta_editorImage noEditor
}


Gui/Cursors/Pointer
{
    diffusemap ../pointer.png, noCompression, wrapS clampToEdge, wrapT clampToEdge, noScaleDown
    useMeshColors
    blendFunc src_alpha one_minus_src_alpha
    meta_editorImage noEditor
}


Gui/Background1
{
    diffusemap Backgnd1_256.png, noCompression

    // We need "ambientMask d" in order to prevent z-fighting with world (entity) GUIs.
    // The font materials have this keyword either, and any material that is supposed
    // to be used as a window background will most likely need it, too.
    ambientMask d

    meta_editorImage noEditor
}


Gui/SmallLogo
{
    diffusemap SmallLogo.png, noCompression

    blendFunc one one

    // We need "ambientMask d" in order to prevent z-fighting with world (entity) GUIs.
    // The font materials have this keyword either, and any material that is supposed
    // to be used as a window background will most likely need it, too.
    ambientMask d

    meta_editorImage noEditor
}


// An invisible material that does nothing but write depth (z-buffer) values.
// This is sometimes useful as the last window of a GUI that covers the entire 640*480 screen,
// namely whenever there is a chance that e.g. world decals (like blood, dirt, etc.) "behind"
// the GUI entity get drawn only *after* the GUI entity. Then the decal would be wrongly visible
// on the GUI, which can be prevented by employing this material.
// This material will be used with the "A_Solid" shader.
Gui/LayDepth
{
    useMeshColors
    blendFunc src_alpha one_minus_src_alpha
    depthOffset 1.0     // Push it a bit "back", so that the mouse cursors work without trouble.

    // Intentionally no   ambientMask d   here, as we *want* the material to also write the depth component.
    // Note that the GUI window that uses this material should set the background colors alpha value to zero.
    // Example (excerpt from a .cgui GUI script):
    //
    //     function LayDepthBuffer:OnInit()
    //         self:set("rect", 0, 0, 640, 480);
    //         self:set("backMaterial", "Gui/LayDepth");
    //         self:set("backColor", 1, 1, 1, 0);
    //     end

    meta_editorImage noEditor
}
